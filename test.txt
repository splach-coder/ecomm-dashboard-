import React, { useState } from 'react';
import { 
  Plus, 
  Filter, 
  Search, 
  Grid3X3, 
  Table, 
  Star,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';

const ProductManagement = () => {
  const [activeTab, setActiveTab] = useState('All');
  const [viewMode, setViewMode] = useState('grid');
  const [currentPage, setCurrentPage] = useState(2);
  const [itemsPerPage, setItemsPerPage] = useState(8);
  const [searchQuery, setSearchQuery] = useState('');

  // Mock data - replace with your Supabase data later
  const mockProducts = [
    {
      id: 1,
      name: 'Xiaomi Monitor 27 Inch',
      category: 'Monitor',
      price: 100.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 2,
      name: 'Xiaomi 14T',
      category: 'Smartphone',
      price: 450.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 3,
      name: 'Xiaomi 14T Pro',
      category: 'Smartphone',
      price: 520.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 4,
      name: 'Philips Monitor 24Inch',
      category: 'Monitor',
      price: 140.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 5,
      name: 'Xiaomi Monitor 24 Inch',
      category: 'Monitor',
      price: 362.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 6,
      name: 'Samsung Galaxy A35',
      category: 'Smartphone',
      price: 274.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 7,
      name: 'Xiaomi 13T',
      category: 'Smartphone',
      price: 410.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    },
    {
      id: 8,
      name: 'Samsung Galaxy A55',
      category: 'Smartphone',
      price: 340.00,
      rating: 4.6,
      image: '/api/placeholder/280/200',
      status: 'active'
    }
  ];

  const tabs = ['All', 'Active', 'Non Active'];

  const filteredProducts = mockProducts.filter(product => {
    const matchesTab = activeTab === 'All' || 
      (activeTab === 'Active' && product.status === 'active') ||
      (activeTab === 'Non Active' && product.status === 'inactive');
    
    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase());
    
    return matchesTab && matchesSearch;
  });

  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const displayedProducts = filteredProducts.slice(startIndex, startIndex + itemsPerPage);

  const handleAddProduct = () => {
    console.log('Add product clicked');
  };

  const ProductCard = ({ product }) => (
    <div className="bg-white rounded-2xl p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200">
      <div className="aspect-square bg-gray-50 rounded-xl mb-4 overflow-hidden">
        <div className="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
          <div className="w-24 h-24 bg-gray-300 rounded-lg"></div>
        </div>
      </div>
      
      <div className="space-y-2">
        <h3 className="font-semibold text-gray-900 text-sm leading-tight">{product.name}</h3>
        <p className="text-xs text-grey">{product.category}</p>
        
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-oceanblue">${product.price.toFixed(2)}</span>
          <div className="flex items-center gap-1">
            <Star size={14} className="text-yellow-400 fill-current" />
            <span className="text-sm text-gray-600">{product.rating}</span>
          </div>
        </div>
      </div>
    </div>
  );

  const Pagination = () => (
    <div className="flex items-center justify-between mt-8">
      <div className="flex items-center gap-2">
        <span className="text-sm text-grey">Show</span>
        <select 
          value={itemsPerPage}
          onChange={(e) => setItemsPerPage(Number(e.target.value))}
          className="border border-gray-200 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-oceanblue focus:border-transparent"
        >
          <option value={8}>8</option>
          <option value={12}>12</option>
          <option value={16}>16</option>
        </select>
        <span className="text-sm text-grey">per page</span>
      </div>

      <div className="flex items-center gap-2">
        <button 
          onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
          className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ChevronLeft size={16} />
        </button>
        
        {[1, 2, 3, 4, 5, 6].map(page => (
          <button
            key={page}
            onClick={() => setCurrentPage(page)}
            className={`w-8 h-8 rounded-lg text-sm font-medium transition-colors ${
              currentPage === page
                ? 'bg-red-500 text-white'
                : 'border border-gray-200 hover:bg-gray-50'
            }`}
          >
            {page}
          </button>
        ))}
        
        <button 
          onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
          disabled={currentPage === totalPages}
          className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ChevronRight size={16} />
        </button>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-6">
      <div className="max-w-7xl mx-auto">
        
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Management Product</h1>
            <p className="text-grey mt-1">Add Product to your store</p>
          </div>
          
          <button
            onClick={handleAddProduct}
            className="bg-moderatelybrown hover:bg-opacity-90 text-white px-6 py-3 rounded-xl font-medium transition-colors duration-200 flex items-center gap-2 self-start sm:self-auto"
          >
            <Plus size={20} />
            Add Product
          </button>
        </div>

        {/* Filters and Controls */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
          
          {/* Tab Filters */}
          <div className="flex bg-white rounded-xl p-1 shadow-sm border border-gray-100">
            {tabs.map(tab => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-6 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                  activeTab === tab
                    ? 'bg-gray-100 text-gray-900'
                    : 'text-grey hover:text-gray-900'
                }`}
              >
                {tab}
              </button>
            ))}
          </div>

          {/* Right Controls */}
          <div className="flex items-center gap-3">
            {/* View Mode Toggle */}
            <div className="flex bg-white rounded-xl p-1 shadow-sm border border-gray-100">
              <button
                onClick={() => setViewMode('table')}
                className={`p-2 rounded-lg transition-colors duration-200 ${
                  viewMode === 'table' ? 'bg-gray-100' : 'hover:bg-gray-50'
                }`}
              >
                <Table size={18} />
              </button>
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded-lg transition-colors duration-200 ${
                  viewMode === 'grid' ? 'bg-gray-100' : 'hover:bg-gray-50'
                }`}
              >
                <Grid3X3 size={18} />
              </button>
            </div>

            {/* Filter Button */}
            <button className="bg-white border border-gray-200 px-4 py-2 rounded-xl hover:bg-gray-50 transition-colors duration-200 flex items-center gap-2">
              <Filter size={18} />
              <span className="hidden sm:inline">Filter</span>
            </button>

            {/* Search */}
            <div className="relative">
              <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-grey" />
              <input
                type="text"
                placeholder="Search Product"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-oceanblue focus:border-transparent w-full sm:w-64"
              />
            </div>
          </div>
        </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {displayedProducts.map(product => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>

        {/* Pagination */}
        <Pagination />

        {/* Bottom spacing for mobile navigation */}
        <div className="h-32 lg:h-0"></div>
      </div>
    </div>
  );
};

export default ProductManagement;